package fofa

import (
	"bufio"
	"crypto/tls"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/gookit/color"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"reflect"
	"runtime"
	"strconv"
	"strings"
	"time"
)

type Config struct {
	Email        string
	Fofa_token   string
	Fofa_timeout string
	Maxpage      string
}

type AutoGenerated struct {
	Mode    string     `json:"mode"`
	Error   bool       `json:"error"`
	Query   string     `json:"query"`
	Page    int        `json:"page"`
	Size    int        `json:"size"`
	Results [][]string `json:"results"`
}

// 获取当前执行程序所在的绝对路径
func GetCurrentAbPathByExecutable() string {
	exePath, err := os.Executable()
	if err != nil {
		log.Fatal(err)
	}
	res, _ := filepath.EvalSymlinks(filepath.Dir(exePath))
	return res
}

func GetConfig() Config {
	//创建一个空的结构体,将本地文件读取的信息放入
	c := &Config{}
	//创建一个结构体变量的反射
	cr := reflect.ValueOf(c).Elem()
	//打开文件io流
	sysType := runtime.GOOS
	if sysType == "windows" {
		f, err := os.Open(GetCurrentAbPathByExecutable() + "\\config.ini")
		if err != nil {
			//log.Fatal(err)
			color.RGBStyleFromString("237,64,35").Println("[Error] Fofa configuration file error!!!")
			os.Exit(1)
		}
		defer func() {
			if err = f.Close(); err != nil {
				log.Fatal(err)
			}
		}()
		//我们要逐行读取文件内容
		s := bufio.NewScanner(f)
		for s.Scan() {
			//以=分割,前面为key,后面为value
			var str = s.Text()
			var index = strings.Index(str, "=")
			var key = str[0:index]
			var value = str[index+1:]
			//通过反射将字段设置进去
			cr.FieldByName(key).Set(reflect.ValueOf(value))
		}
		err = s.Err()
		if err != nil {
			log.Fatal(err)
		}
		//返回Config结构体变量
		return *c
	} else {
		f, err := os.Open(GetCurrentAbPathByExecutable() + "/config.ini")
		if err != nil {
			//log.Fatal(err)
			color.RGBStyleFromString("237,64,35").Println("[Error] Fofa configuration file error!!!")
			os.Exit(1)
		}
		defer func() {
			if err = f.Close(); err != nil {
				log.Fatal(err)
			}
		}()
		//我们要逐行读取文件内容
		s := bufio.NewScanner(f)
		for s.Scan() {
			//以=分割,前面为key,后面为value
			var str = s.Text()
			var index = strings.Index(str, "=")
			var key = str[0:index]
			var value = str[index+1:]
			//通过反射将字段设置进去
			cr.FieldByName(key).Set(reflect.ValueOf(value))
		}
		err = s.Err()
		if err != nil {
			log.Fatal(err)
		}
		//返回Config结构体变量
		return *c
	}
}

func fofa_api(keyword string, email string, key string, page int, size int) string {
	input := []byte(keyword)
	encodeString := base64.StdEncoding.EncodeToString(input)
	api_request := fmt.Sprintf("https://fofa.info/api/v1/search/all?email=%s&page=%d&size=%d&key=%s&qbase64=%s&fields=ip,host,title,port,protocol", strings.Trim(email, " "), page, size, strings.Trim(key, " "), encodeString)
	return api_request
}

func fofahttp(url string, timeout string) *AutoGenerated {
	var itime, err = strconv.Atoi(timeout)
	if err != nil {
		log.Println("fofa超时参数错误: ", err)
	}
	transport := &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}}
	client := &http.Client{
		Timeout:   time.Duration(itime) * time.Second,
		Transport: transport,
	}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Accept", "*/*;q=0.8")
	req.Header.Set("Connection", "close")
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	result, _ := ioutil.ReadAll(resp.Body)
	res := &AutoGenerated{}
	json.Unmarshal(result, &res)
	return res
}

func Fafaall(keyword string) (urls []string) {
	color.RGBStyleFromString("244,211,49").Println("请耐心等待fofa搜索......")
	fofa := GetConfig()
	url := fofa_api(keyword, fofa.Email, fofa.Fofa_token, 1, 1000)
	res := fofahttp(url, fofa.Fofa_timeout)
	pagelength := res.Size/1000 + 1
	for _, value := range res.Results {
		urls = append(urls, value[1])
	}
	Maxpage, _ := strconv.Atoi(fofa.Maxpage)
	if pagelength > 1 {
		for i := 2; i <= pagelength && i <= Maxpage; i++ {
			url = fofa_api(keyword, fofa.Email, fofa.Fofa_token, i, 1000)
			res = fofahttp(url, fofa.Fofa_timeout)
			if len(res.Results) > 0 {
				for _, value := range res.Results {
					urls = append(urls, value[1])
				}
			}
		}
	}

	return urls
}
